批处理参数传递 (2011-02-16 10:58:02)
转载▼
	

标签： 批处理 参数传递 dos  分类： DOS批处理(随笔）  
 
　　跟C语言类似，在调用函数或其他批处理时可能需要传递参数。批处理的参数传递分为直接和间接两种传递参数的方法。
 　　【 1、直接传递 】
 　　直接传递参数，即在使用call命令时，不使用任何参数，在子函数或子批处理里面直接对主函数(也称父批处理)里面的变量进行修改。这跟汇编语言里面的参数传递方式类似。
 　　直接传递参数举例：
 　　===============================================
 　　@echo off
 　　setlocal enabledelayedexpansion
 　　set var=aCdehiM,?mnrstW y
 　　echo %var%
 　　call :deal
 　　setlocal disabledelayedexpansion
 　　set var=%var:?=!%
 　　echo %var%
 　　pause>nul
 　　exit
 　　:deal
 　　set tm=!var!
 　　set var=
 　　for %%i in (6,3,11,11,16,15,1,4,11,5,12,13,9,0,12,7,15,14,5,10,2,16,18,8) do (
 　　set var=!var!!tm:~%%i,1!
 　　)
 　　goto :eof
 　　===============================================
 　　可以发现，当我们把变量var作为参数赋予子函数:deal后，子函数对var的值进行了修改；当子函数返回后，主函数里面的var的值就已经是子函数里面var被修改后的值了。
 　　该例子中，使用了本节课前面讲到的setlocal enabledelayedexpansion和setlocal disabledelayedexpansion，前者保证了var在for循环里面能够根据我们的意愿进行处理，后者保证了能够正确输出符号"!"。另外例子中还使用了命令set，利用set对字符串进行了处理。还有一个地方使用了语句goto :eof，该语句相当于C语言里面的return或汇编语言里面的RET，即子程序返回命令。需要说明的是，当子函数本身就在批处理文件的末尾的话，我们是可以省略这句话的，比如将此例的goto :eof删除是不会产生任何影响的。
 　　【 2、间接传递 】
 　　间接传递参数，即在使用call命令时，在其后面添加参数，形如call {[:label][ChildBatch]} Parameter1 Parameter2 ... ParameterN。这跟C语言里面传递参数的格式类似。不同于C语言，批处理中的子函数不需要定义形参，更不需要指定参数的个数。传递过来的参数，在子函数或子批处理里面是以%1~%9的形式表示的，即%1~%9分别表示传递过来的第1~9个参数。
 　　===============================================
 　　@echo off
 　　call :deal aaa bbb "c c" ddd eee
 　　pause>nul
 　　exit
 　　:deal
 　　echo %%0 = %0
 　　echo %%1 = %1
 　　echo %%2 = %2
 　　echo %%3 = %3
 　　echo %%4 = %4
 　　echo %%5 = %5
 　　===============================================
 　　通过这个例子就可以清晰的看到%n参数表示法的用法。参数列表中包含空格的依旧要用双引号(")引起来；另外，也可以看到，%0已经变成了子函数的标号了，而不是父批处理的文件名全称。
 　　【 3、区别 】
 　　这两种参数传递方法本质上是没有区别的，形式上，直接传递直接对原变量进行操作，丢失了原变量的值；间接传递则通过%n对原变量进行了简单的备份，并且通用性更强，即不限定原变量的名称。另外，使用%n还有一个非常大的好处，就是可以通过%~*i来加强处理变量的能力。关于%~*i，详细内容参见for /?。
 　　针对二者的差别，可以根据情况决定使用哪种传递方式：
 　　--1、作为参数的变量名固定、且在子函数中不需要对其进行备份的情况下，使用直接传递法；
 　　--2、若将子函数作为一个通用的程序模块，以适应于对不同变量的处理，或者作为参数的变量不需要备份时，使用间接传递法。
 　　具体使用哪种方法，还需根据实际情况或使用习惯进行选择。